ctrl +  `  to open terminal in vs code
ctrl + L to clean commands written on the terminal
ctrl + | to split terminal
ctrl + up arrow sign ==>> to revise the above written commands
code . ==>>means open the folder in vscode 
crtl + C: If you don’t want to close your terminal, but want to stop a running
command, just use the “Ctrl + C” using your keyboard

let folder name     henok,chaltu and hani then:
    hani cd henok ==>> changing directory
    henok cd ../chaltu ==>>getting out from henok to chaltu
    henok mv hanny ../chaltu ==>moving folder hanny of folder henok to chaltu
    chaltu mv hanny hani ==>> renaming folder name
    chaltu mkdir haqu ==>>creating folder in chaltu folder
    chaltu pwd ==>> desktop path of that folder
    almaz ls ==>>listing sub folders of the main folder almaz
    almaz rm ../henok/about-henok.html  ==>>get out from the folder henok then delete the file in it
    drwxr-xr-x  3/u  humanstown/g staff/o 96 may 26 20:06 chaltu 
==>>read/write  user  group  everyone else  size   day 
directory means folder:
look for : linux permission numbering
other way to assign or change permission is chmod but using bash I can't alter permissions on my own pc. but if we use cswing in vscode as default we can change permission access of our own computers
https://www.educative.io/blog/bash-shell-command-cheat-sheet
-----------------------Git--------------------------------
used for:
*to review , update ,to avoide repetition of similar works 
*as guidence for group team as team ytekefafele sera and lay saydereg befit to combine (version control system)so we can edit codes of our team worker
*to track changes of our codes(helps where an error has occured)
*to make backup of our codes(give accountability)
*to make collaboration of our team members
The .git directory does the following:
Remote information (to which remote server your project is connected)
● History of all local commits
● Branch information (on which branch is your current project state (HEAD)
pointing to)
● All logs of all local commits you have ever made (including revert
changes)
Where does the. git directory come from?
● In case of new projects, this directory is created when you open your new
project folder in terminal and type the command “git init”
● If it is an existing project, this directory is created when you bring a copy
of a repository into your local computer through the command “git clone”.
Git is software that runs locally. 
GitHub is a website/online host where you can remotely store your git
project/repositories
Git workflow: It is a guideline for how to use Git in a team project to ensure the team is
on the same page.
Git repository/repo: It is a virtual location on GitHub where a user can store code,
Repository is nothing but a folder where
files and other folders are saved remotely in cloud services like GitHub
Why README.md file? This file tells other people why
your project is useful, how they can get started using it
and what they can do with your project
● Creating a new branch:
o Type: git branch <branchName>
● List all of the branches in your repository:
o Type: git branch
● Delete a specified branch:
o Type: git branch -D < branchName >
● Rename the current branch to “newBrahchName”:
o Type: git branch -m < newBrahchNam >
Git commands:
git add . (add all files in the current directory to staging area)
git add <file_name> (add a specific file to staging area)
git commit -m “message” (commit the changes with a message)
git log (show the commit history)
git status (show the status of the repository)
git push 
git pull
forking, sending pull requests and merging
Forking: A fork is a copy of a repository. Forking is basically copying any public
repository from GitHub of someone to your GitHub
Why forking: Forking a repository allows you to freely make changes without affecting
the original project.
Clone: You will need to clone it and make it available in your local computer so
that you make changes
▪ Commit: Make changes and commit the changes
▪ Push: Push the changes.
we don't add binary files and very large sized files into our GitHub
repository because they are not easily manageable and can cause issues
---------------------------------clear steps on how to use GitHub--------------------------------
1. Pushing Changes
Pushing sends your local changes to the remote GitHub repository.

Steps to Push:

Make Changes: Modify your files locally.
Stage Changes: Add the changes you want to commit:
bash
Copy code
git add .
Commit Changes: Commit your staged changes with a message describing what you've done:
bash
Copy code
git commit -m "Describe your changes here"
Push to Your Branch: Push the changes to your branch on GitHub:
bash
Copy code
git push origin branch-name
2. Pulling Changes
Pulling fetches and merges changes from the remote repository to your local repository.

Steps to Pull:

Switch to Main Branch (or any branch you want to update):
bash
Copy code
git checkout main
Pull Latest Changes: Pull changes from the remote repository:
bash
Copy code
git pull origin main
This ensures your local main branch is up-to-date with changes made by others before you merge or continue work.
3. Merging Branches
Merging applies changes from one branch into another (usually merging a feature branch into main).

Steps to Merge:

Create a Pull Request (PR): After pushing your changes, go to GitHub, open a pull request to merge your branch into main:
On GitHub, click "Compare & pull request".
Review the changes and click "Create pull request".
Review & Approve: Team members review the pull request. They can add comments or approve the changes.
Merge the Pull Request: Once approved, click "Merge pull request" on GitHub to merge the changes into the main branch.
Pull Latest Main: After merging, everyone should pull the latest main branch to keep their local copies updated:
bash
Copy code
git pull origin main
Typical Workflow for Team Collaboration:
Start on a New Branch:

Always create a new branch to work on a feature or fix, using:
bash
Copy code
git checkout -b new-feature
Push Regularly: Push your work regularly to your own branch to keep it backed up and share progress.

Sync with Main: Before merging, make sure your local main branch is up-to-date:

bash
Copy code
git checkout main
git pull origin main
Resolve Conflicts: If your branch has conflicts with the main branch, Git will show conflict markers, which you need to resolve manually, then commit and push.

Merge & Pull: After merging your changes into main, everyone should pull the updated main to avoid conflicts.

This ensures smooth collaboration and reduces the chances of conflicts.






